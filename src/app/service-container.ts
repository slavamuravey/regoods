import { CodeReceiverFactory } from "./service/factory/code-receiver";
import { SmsActivateClientFactory } from "./service/factory/sms-activate-client";
import { RandomDataToolsClientFactory } from "./service/factory/random-data-tools-client";
import { PhoneRenterFactory } from "./service/factory/phone-renter";
import { RandomNameGeneratorFactory } from "./service/factory/random-name-generator";
import { WbUserSessionRepositoryFactory } from "./repository/factory/wb-user-session";
import { WbUserRepositoryFactory } from "./repository/factory/wb-user";
import { ProxyRepositoryFactory } from "./repository/factory/proxy";
import { ProxyResolverFactory } from "./service/factory/proxy-resolver";
import { LoginScenarioFactory } from "./scenario/factory/login";
import { ProfileScenarioFactory } from "./scenario/factory/profile";
import { CodeScenarioFactory } from "./scenario/factory/code";
import { AddToCartScenarioFactory } from "./scenario/factory/add-to-cart";
import { KeyPhraseScenarioFactory } from "./scenario/factory/key-phrase";
import { OrderScenarioFactory } from "./scenario/factory/order";
import { ScreencastLauncherFactory } from "./worker/factory/screencast-launcher";
import { JobLauncherFactory } from "./worker/factory/job-launcher";
import { DebuggerAddressMessageListenerFactory } from "./worker/factory/message-listener/debugger-address";
import { NeedStopMessageListenerFactory } from "./worker/factory/message-listener/need-stop";
import { ScreencastFrameListenerFactory } from "./worker/factory/screencast-frame-listener";
import { WorkersLauncherFactory } from "./worker/factory/workers-launcher";
import { DeliveryItemMessageListenerFactory } from "./worker/factory/message-listener/delivery-item";
import { OrderItemMessageListenerFactory } from "./worker/factory/message-listener/order-item";
import { createServiceContainer, createServiceSpecBuilder } from "vorarbeiter";

const sb = createServiceSpecBuilder();

sb.set("code-receiver", new CodeReceiverFactory());
sb.set("sms-activate-client", new SmsActivateClientFactory());
sb.set("random-data-tools-client", new RandomDataToolsClientFactory());
sb.set("wb-user-session-repository", new WbUserSessionRepositoryFactory());
sb.set("wb-user-repository", new WbUserRepositoryFactory());
sb.set("proxy-repository", new ProxyRepositoryFactory());
sb.set("phone-renter", new PhoneRenterFactory());
sb.set("random-name-generator", new RandomNameGeneratorFactory());
sb.set("proxy-resolver", new ProxyResolverFactory());
sb.set("login-scenario", new LoginScenarioFactory());
sb.set("profile-scenario", new ProfileScenarioFactory());
sb.set("code-scenario", new CodeScenarioFactory());
sb.set("add-to-cart-scenario", new AddToCartScenarioFactory());
sb.set("key-phrase-scenario", new KeyPhraseScenarioFactory());
sb.set("order-scenario", new OrderScenarioFactory());
sb.set("screencast-launcher", new ScreencastLauncherFactory());
sb.set("job-launcher", new JobLauncherFactory());
sb.set("debugger-address-message-listener", new DebuggerAddressMessageListenerFactory());
sb.set("delivery-item-message-listener", new DeliveryItemMessageListenerFactory());
sb.set("order-item-message-listener", new OrderItemMessageListenerFactory());
sb.set("need-stop-message-listener", new NeedStopMessageListenerFactory());
sb.set("screencast-frame-listener", new ScreencastFrameListenerFactory());
sb.set("workers-launcher", new WorkersLauncherFactory());

export const container = createServiceContainer(sb.getServiceSpec());
